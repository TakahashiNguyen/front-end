# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  pull_request:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: TakahashiNguyen/cache-apt-pkgs-action@master
        with:
          packages: webp ffmpeg
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: actions/cache@main
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            ./node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}
      - name: Generate mp3 files
        working-directory: ./public/audio
        run: |
          find . -type f -iname "*.*" -exec sh -c '
            FILE={}
            output_dir="../.mp3/$(echo $(dirname {}) | cut -c 3-)"
            mkdir -p $output_dir
            ffmpeg -i "{}" -codec:a libmp3lame -qscale:a 9 "$output_dir/$(basename {} .${FILE##*.}).mp3"
          ' \;
      - name: Generate WEBP files
        working-directory: ./public/image/
        run: |
          find . -type f -iname "*.*" -exec sh -c '
            FILE={}
            output_dir="../.webp/$(echo $(dirname {}) | cut -c 3-)"
            mkdir -p $output_dir
            cwebp -q 1 "{}" -quiet -o "$output_dir/$(basename {} .${FILE##*.}).webp" 
          ' \;
      - name: Install dependencies
        run: npm i --package-lock-only && npm ci
      - name: Build
        run: npm run build
      - uses: actions/upload-artifact@master
        with:
          name: github-page
          path: ./dist
  deploy:
    if: ${{ !github.event.act || !github.event.pull_request }}
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@master
        with:
          name: github-page
          path: ./dist
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
